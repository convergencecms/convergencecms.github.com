/* MUCSSLE

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


	mucssle V1.0
	Copyright 2012, Eric Smith
	"pump your site uuuuuup."  sorry - my only Arnold joke, I promise.
	
	Clearly I would be nowhere without the help of 
	Dave Gamache and www.getskeleton.com
	
	Free to use under the MIT license.
	http://www.opensource.org/licenses/mit-license.php
	10/12/2012


	Table of Contents
==================================================
	#Customize with LESS
    --
	#Base Grid
    #Media Queries
    #Clearing
	--    
	#Your CSS
    #Your Media Queries
	
*/


/* #Base Grid - NO REAL NEED TO MODIFY THIS SECTION
================================================== */
@mq1: @widest - 1;
@mq2: @breakdance - 1;
@column: 4.166666666%;
@gutter: 2.083333333%;
@margin: @gutter / 2;
@numcolumns:16;


    .container-mucssle							{ position: relative; width: @widest; margin: 0 auto; padding: 0; }
    .column, .columns                           { float: left; display: inline; margin-left: @margin!important; margin-right: @margin!important; }
    .container-mucssle .row						{ margin-bottom: @gutter; }

    /* Nested Column Classes */
    .column.alpha, .columns.alpha               { margin-left: 0!important; }
    .column.omega, .columns.omega               { margin-right: 0!important; }

    
    .container-mucssle{
		/* Base Grid */
		 .one.column                      { width: @column; }
		 .columns{
		 	&.two                     { width: @column * 2 + @gutter * 1; }
		 	&.three                   { width: @column * 3 + @gutter * 2; }
		 	&.four                    { width: @column * 4 + @gutter * 3; }
		 	&.five                    { width: @column * 5 + @gutter * 4; }
		 	&.six                     { width: @column * 6 + @gutter * 5; }
		 	&.seven                   { width: @column * 7 + @gutter * 6; }
		 	&.eight                   { width: @column * 8 + @gutter * 7; }
		 	&.nine                    { width: @column * 9 + @gutter * 8; }
		 	&.ten                     { width: @column * 10 + @gutter * 9; }
		 	&.eleven                  { width: @column * 11 + @gutter * 10; }
		 	&.twelve                  { width: @column * 12 + @gutter * 11; }
		 	&.thirteen                { width: @column * 13 + @gutter * 12; }
		 	&.fourteen                { width: @column * 14 + @gutter * 13; }
		 	&.fifteen                 { width: @column * 15 + @gutter * 14; }
		 	&.sixteen                 { width: @column * 16 + @gutter * 15; }
		}
		 .one-third.column                { width: ((@column+@gutter) * (@numcolumns - 1)) / 3; }
		 .two-thirds.column               { width: ((((@column+@gutter) * (@numcolumns - 1)) / 3) * 2) + @gutter; }
		
		
		.alpha, .omega {
			
			&.one.column                   { width: @column + (@gutter / 2); }
		 	&.columns{
		 		&.two                     { width: @column * 2 + @gutter * 1 + (@gutter / 2); }
			 	&.three                   { width: @column * 3 + @gutter * 2 + (@gutter / 2); }
			 	&.four                    { width: @column * 4 + @gutter * 3 + (@gutter / 2); }
			 	&.five                    { width: @column * 5 + @gutter * 4 + (@gutter / 2); }
		 		&.six                     { width: @column * 6 + @gutter * 5 + (@gutter / 2); }
			 	&.seven                   { width: @column * 7 + @gutter * 6 + (@gutter / 2); }
			 	&.eight                   { width: @column * 8 + @gutter * 7 + (@gutter / 2); }
		 		&.nine                    { width: @column * 9 + @gutter * 8 + (@gutter / 2); }
				&.ten                     { width: @column * 10 + @gutter * 9 + (@gutter / 2); }
				&.eleven                  { width: @column * 11 + @gutter * 10 + (@gutter / 2); }
				&.twelve                  { width: @column * 12 + @gutter * 11 + (@gutter / 2); }
				&.thirteen                { width: @column * 13 + @gutter * 12 + (@gutter / 2); }
				&.fourteen                { width: @column * 14 + @gutter * 13 + (@gutter / 2); }
				&.fifteen                 { width: @column * 15 + @gutter * 14 + (@gutter / 2); }
				&.sixteen                 { width: @column * 16 + @gutter * 15 + (@gutter / 2); }
			}
			&.one-third.column            { width: ((@column+@gutter) * (@numcolumns - 1)) / 3 + (@gutter / 2); }
		 	&.two-thirds.column           { width: ((((@column+@gutter) * (@numcolumns - 1)) / 3) * 2) + @gutter * 1; }
		}
		
		.alpha.omega {
			
			&.one.column                   { width: @column + @gutter; }
		 	&.columns{
		 		&.two                     { width: @column * 2 + @gutter * 2; }
			 	&.three                   { width: @column * 3 + @gutter * 3; }
			 	&.four                    { width: @column * 4 + @gutter * 4; }
			 	&.five                    { width: @column * 5 + @gutter * 5; }
		 		&.six                     { width: @column * 6 + @gutter * 6; }
			 	&.seven                   { width: @column * 7 + @gutter * 7; }
			 	&.eight                   { width: @column * 8 + @gutter * 8; }
		 		&.nine                    { width: @column * 9 + @gutter * 9; }
				&.ten                     { width: @column * 10 + @gutter * 10; }
				&.eleven                  { width: @column * 11 + @gutter * 11; }
				&.twelve                  { width: @column * 12 + @gutter * 12; }
				&.thirteen                { width: @column * 13 + @gutter * 13; }
				&.fourteen                { width: @column * 14 + @gutter * 14; }
				&.fifteen                 { width: @column * 15 + @gutter * 15; }
				&.sixteen                 { width: @column * 16 + @gutter * 16; }
			}
			&.one-third.column            { width: ((@column+@gutter) * (@numcolumns - 1)) / 3 + @gutter * 1; }
		 	&.two-thirds.column           { width: ((((@column+@gutter) * (@numcolumns - 1)) / 3) * 2) + @gutter * 2; }
		}
		
		
		
		/* Offsets */
		 .offset-by-half                  { margin-left: @margin + (@column + @gutter) / 2; }
		 .offset-by-one                   { margin-left: @margin + (@column + @gutter) * 1; }
		 .offset-by-two                   { margin-left: @margin + (@column + @gutter) * 2; }
		 .offset-by-three                 { margin-left: @margin + (@column + @gutter) * 3; }
		 .offset-by-four                  { margin-left: @margin + (@column + @gutter) * 4; }
		 .offset-by-five                  { margin-left: @margin + (@column + @gutter) * 5; }
		 .offset-by-six                   { margin-left: @margin + (@column + @gutter) * 6; }
		 .offset-by-seven                 { margin-left: @margin + (@column + @gutter) * 7; }
		 .offset-by-eight                 { margin-left: @margin + (@column + @gutter) * 8; }
		 .offset-by-nine                  { margin-left: @margin + (@column + @gutter) * 9; }
		 .offset-by-ten                   { margin-left: @margin + (@column + @gutter) * 10; }
		 .offset-by-eleven                { margin-left: @margin + (@column + @gutter) * 11; }
		 .offset-by-twelve                { margin-left: @margin + (@column + @gutter) * 12; }
		 .offset-by-thirteen              { margin-left: @margin + (@column + @gutter) * 13; }
		 .offset-by-fourteen              { margin-left: @margin + (@column + @gutter) * 14; }
		 .offset-by-fifteen               { margin-left: @margin + (@column + @gutter) * 15; }
	}


/*  #Media Queries - NO REAL NEED TO MODIFY THIS SECTION
================================================== */
    @media only screen and (max-width: @mq1) {
		.container-mucssle.responsive{ 
			width:100% - 2*@gutter;
		}
	}
	@media only screen and (max-width: @mq2) {
		.container-mucssle.responsive{ 
			width:100% - 2*@gutter;
			
			.columns, .column { margin: 0!important; }
			
			.column{
			 	&.one-third,
				&.two-thirds,
				&.one					{ width:100%;}
			}          
			 .columns{
				&.two,                   
				&.three,                 
				&.four,                  
				&.five,                  
				&.six,                   
				&.seven,                 
				&.eight,                 
				&.nine,                  
				&.ten,                   
				&.eleven,                
				&.twelve,                
				&.thirteen,              
				&.fourteen,              
				&.fifteen,               
				&.sixteen				{ width: 100%; }
			}
			.alpha, .omega, .alpha.omega {
				&.column{
			 		&.one-third,
					&.two-thirds,
					&.one				{ width:100%; }
				}
			}
			.alpha, .omega, .alpha.omega {
				&.columns{
					&.two,                   
					&.three,                 
					&.four,                  
					&.five,                  
					&.six,                   
					&.seven,                 
					&.eight,                 
					&.nine,                  
					&.ten,                   
					&.eleven,                
					&.twelve,                
					&.thirteen,              
					&.fourteen,              
					&.fifteen,               
					&.sixteen			{ width: 100%; }
				}
			}	
		}
    }





/* #Clearing - NO REAL NEED TO MODIFY THIS SECTION
================================================== */

    /* Self Clearing Goodness */
    .container-mucssle:after { content: "\0020"; display: block; height: 0; clear: both; visibility: hidden; }

    /* Use clearfix class on parent to clear nested columns,
    or wrap each row of columns in a <div class="row"> */
    .clearfix:before,
    .clearfix:after,
    .container-mucssle .row:before,
    .container-mucssle .row:after {
      content: '\0020';
      display: block;
      overflow: hidden;
      visibility: hidden;
      width: 0;
      height: 0; }
    .container-mucssle .row:after,
    .clearfix:after {
      clear: both; }
    .container-mucssle .row,
    .clearfix {
      zoom: 1; }

    /* You can also use a <br class="clear" /> to clear columns */
    .clear {
      clear: both;
      display: block;
      overflow: hidden;
      visibility: hidden;
      width: 0;
      height: 0;
    }